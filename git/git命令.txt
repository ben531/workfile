
github 采用ssh提交:
生成ssh key文件, 下面有,
再在github中设置,
最后 git remote set-url origin git@github.com:GitRepoName.git
git push origin master
=====================================================================
将已有代码提交:
git init
git add .
git commit -m '初次提交'
git remote add origin  github的地址 (如:https://github.com/ben531/springboot-redis.git)
git push -u origin master
=======
我现在不知道其他人在相同的地方改过东西了
=====================================================================
#新增的忽略文件没有生效，是因为git是有缓存的，而之前的文件在缓存中，并不会清除掉，还会继续提交，所以更新.gitignore文件，要清除缓存文件
git rm -r --cached . 
git add .
git commit -m 'update .gitignore'
git push origin master
=====================================================================
ctrl + l 清屏（等同于clear命令）
=====================================================================
生成ssh key文件，执行ssh-keygen -t rsa
- t 指定密钥类型，默认是 rsa ，可以省略
然后会让你输入两次密码（密码可不填），最后出现 key fingerprint和 key's randomart 就表示创建成功了。
最后在gitlab的sshkey中添加~/.ssh/id_rsa的内容即可。

=====================================================================
git branch 	  查询本地分支
git branch -r 查询远程所有分支
git branch -a 查询本地和远程所有分支
(master) git checkout mybranch  //从master切换到mybranch分支
git checkout -b mybranch 创建mybranch分支
git push origin mybranch //提交该分支到远程分支仓库
(master) git merge mybranch // 切到master分支后，将mybranch合并到本地master上
(master) git push origin master //将合并后的master推送到远程仓库

git push origin –delete mybranch //删除服务器远端的分支

git branch –d mybranch //删除本地已经合并了的分支
git branch –D mybranch //删除本地未合并的分支

git help reset // 查看reset的帮助

git status // 查看哪些文件没有在暂存区
git add . // 将全部文件/文件夹放入暂存区
git add file // 将file文件放入暂存区
git ls-files //查看暂存区有哪些文件
git rm --cached file //将file文件从暂存区移除
git rm -r --cached 文件夹 //将文件夹从暂存区移除

git commit file // 将file文件从暂存区提交到本地库
git commit -m 'message' // 将file文件从暂存区提交到本地库

git log // 历史记录
git log --pretty=oneline // 用一行显示历史记录(hash值显示全部)
git log --oneline // 用一行显示历史记录(hash值显示一部分)
git reflog //移动指针进行版本回退

git reset --hard hash值          // 可以前进或后退
git reset --hard HEAD^           // 只能往后退, 有个^, 回退几个版本
git reset --hard HEAD~n          // 只能往后退,  回退到n个版本

git remote -v //查看远程地址
git remote add origin url //将远程地址url命别名为origin添加进去
git remote remove url // 删除远程仓库地址

=====================================================================
保存git账户密码: 在.git/config文件中追加如下代码
[credential]
    helper = store
或:
1、设置记住密码（默认15分钟）：
git config --global credential.helper cache

2、如果想自己设置时间，可以这样做：
git config credential.helper 'cache --timeout=3600'
这样就设置一个小时之后失效

3、长期存储密码：
全局: git config --global credential.helper store
本地: git config --local credential.helper store

4、增加远程地址的时候带上密码也是可以的。(推荐)
http://yourname:password@git.oschina.net/name/project.git
=====================================================================

git处理冲突:
A提交了文件到远程仓库,
此时B也修改了该文件, 但并不知道A修改并提交了,此时B在push时会提交不上去.
B应该先将自己的文件备份, 再将版本回退到上一个版本(git reset --hard HEAD^或git reset --hard 上个版本的hash值),
然后再从远程仓库pull到本地(git pull origin master),
再对比冲突, 最后提交.

=====================================================================

当修改了远程仓库的文件，而又不想每次提交的时候显示提交这个文件时(典型的是修改*.properties文件)：
git restore 文件名
如: git restore application.properties
如果想恢复对此文件的管理：
git restore --staged 文件名
如: git restore --staged application.properties
=====================================================================
1,从已有的分支创建新的分支(如从master分支),创建一个dev分支
git checkout -b dev
2,创建完可以查看一下,分支已经切换到dev
git branch
    * dev
    master
3,提交该分支到远程仓库
git push origin dev
4,测试从远程获取dev
git pull origin dev
或者：
如果用命令行，运行 git fetch，可以将远程分支信息获取到本地，再运行 git checkout -b local-branchname origin/remote_branchname  就可以将远程分支映射到本地命名为local-branchname  的一分支
5,我觉得现在重要的就是设置git push,pull默认的提交获取分支,这样就很方便的使用git push 提交信息或git pull获取信息
git branch --set-upstream-to=origin/dev
取消对master的跟踪
git branch --unset-upstream master
6,现在随便修改一下工程文件的内容,然后git commit ,git push,之后就可以直接提交到远程的dev分支中,而不会是master